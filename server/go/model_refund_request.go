/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// RefundRequest - Payload for the method CreateRefund.
type RefundRequest struct {

	// List of items to be refunded.
	Items []RefundRequestItem `json:"items"`
}

// AssertRefundRequestRequired checks if the required fields are not zero-ed
func AssertRefundRequestRequired(obj RefundRequest) error {
	elements := map[string]interface{}{
		"items": obj.Items,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertRefundRequestItemRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseRefundRequestRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of RefundRequest (e.g. [][]RefundRequest), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRefundRequestRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRefundRequest, ok := obj.(RefundRequest)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRefundRequestRequired(aRefundRequest)
	})
}
