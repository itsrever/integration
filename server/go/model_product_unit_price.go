/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// ProductUnitPrice - Price per unit of the product in the shop currency. Must be present if there are no variants. Does not include taxes nor discounts. Those will be applied later on.
type ProductUnitPrice struct {

	// amount (optionally with decimals), without currency symbol and thousands separator
	Amount float64 `json:"amount"`

	// three-letter code as ISO 4217 currency code.  Examples: EUR, USD, JPY, GBP... The currency must be supported by REVER. 
	Currency string `json:"currency"`
}

// AssertProductUnitPriceRequired checks if the required fields are not zero-ed
func AssertProductUnitPriceRequired(obj ProductUnitPrice) error {
	elements := map[string]interface{}{
		"amount": obj.Amount,
		"currency": obj.Currency,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseProductUnitPriceRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ProductUnitPrice (e.g. [][]ProductUnitPrice), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseProductUnitPriceRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aProductUnitPrice, ok := obj.(ProductUnitPrice)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertProductUnitPriceRequired(aProductUnitPrice)
	})
}
