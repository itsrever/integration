/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// Shipping - Shipping information
type Shipping struct {

	// Text associated to the shipping line.
	Description string `json:"description,omitempty"`

	Taxes MultiMoney `json:"taxes"`

	Amount MultiMoney `json:"amount"`
}

// AssertShippingRequired checks if the required fields are not zero-ed
func AssertShippingRequired(obj Shipping) error {
	elements := map[string]interface{}{
		"taxes": obj.Taxes,
		"amount": obj.Amount,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertMultiMoneyRequired(obj.Taxes); err != nil {
		return err
	}
	if err := AssertMultiMoneyRequired(obj.Amount); err != nil {
		return err
	}
	return nil
}

// AssertRecurseShippingRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Shipping (e.g. [][]Shipping), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseShippingRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aShipping, ok := obj.(Shipping)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertShippingRequired(aShipping)
	})
}
