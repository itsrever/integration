/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

type IntegrationOption struct {

	// Name of the option
	Name string `json:"name"`

	// Value of the option
	Value string `json:"value"`
}

// AssertIntegrationOptionRequired checks if the required fields are not zero-ed
func AssertIntegrationOptionRequired(obj IntegrationOption) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"value": obj.Value,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseIntegrationOptionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationOption (e.g. [][]IntegrationOption), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationOptionRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationOption, ok := obj.(IntegrationOption)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationOptionRequired(aIntegrationOption)
	})
}
