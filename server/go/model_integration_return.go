/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// IntegrationReturn - A return operation executed over one or more items of an order. It might be in progress or successfully completed. 
type IntegrationReturn struct {

	// ID of the line item returned. Must exist in the `line_items` array of the order.
	LineItemId string `json:"line_item_id"`

	// Number of products returned. The sum of quantities per `line_item_id` must match the total quantity of the line item.
	Quantity float32 `json:"quantity"`
}

// AssertIntegrationReturnRequired checks if the required fields are not zero-ed
func AssertIntegrationReturnRequired(obj IntegrationReturn) error {
	elements := map[string]interface{}{
		"line_item_id": obj.LineItemId,
		"quantity": obj.Quantity,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseIntegrationReturnRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationReturn (e.g. [][]IntegrationReturn), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationReturnRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationReturn, ok := obj.(IntegrationReturn)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationReturnRequired(aIntegrationReturn)
	})
}
