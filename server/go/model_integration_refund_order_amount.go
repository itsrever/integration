/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// IntegrationRefundOrderAmount - Amount of the refund, with currency associated. Must match the customer currency given in the `Order` object 
type IntegrationRefundOrderAmount struct {

	// amount (optionally with decimals), without currency symbol and thousands separator
	Amount float64 `json:"amount"`

	// three-letter code as ISO 4217 currency code.  Examples: EUR, USD, JPY, GBP... The currency must be supported by REVER. 
	Currency string `json:"currency"`
}

// AssertIntegrationRefundOrderAmountRequired checks if the required fields are not zero-ed
func AssertIntegrationRefundOrderAmountRequired(obj IntegrationRefundOrderAmount) error {
	elements := map[string]interface{}{
		"amount": obj.Amount,
		"currency": obj.Currency,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseIntegrationRefundOrderAmountRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationRefundOrderAmount (e.g. [][]IntegrationRefundOrderAmount), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationRefundOrderAmountRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationRefundOrderAmount, ok := obj.(IntegrationRefundOrderAmount)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationRefundOrderAmountRequired(aIntegrationRefundOrderAmount)
	})
}
