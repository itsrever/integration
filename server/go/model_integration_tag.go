/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// IntegrationTag - a tag (string) associated to one resource
type IntegrationTag struct {

	Name string `json:"name"`
}

// AssertIntegrationTagRequired checks if the required fields are not zero-ed
func AssertIntegrationTagRequired(obj IntegrationTag) error {
	elements := map[string]interface{}{
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseIntegrationTagRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationTag (e.g. [][]IntegrationTag), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationTagRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationTag, ok := obj.(IntegrationTag)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationTagRequired(aIntegrationTag)
	})
}
