/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// IntegrationLineItemTotalDiscounts - total amount of discounts applied to this line item. Each item of this line item has a proportional discount.
type IntegrationLineItemTotalDiscounts struct {

	AmountShop IntegrationMultiMoneyAmountShop `json:"amount_shop"`

	AmountCustomer IntegrationMultiMoneyAmountCustomer `json:"amount_customer"`
}

// AssertIntegrationLineItemTotalDiscountsRequired checks if the required fields are not zero-ed
func AssertIntegrationLineItemTotalDiscountsRequired(obj IntegrationLineItemTotalDiscounts) error {
	elements := map[string]interface{}{
		"amount_shop": obj.AmountShop,
		"amount_customer": obj.AmountCustomer,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertIntegrationMultiMoneyAmountShopRequired(obj.AmountShop); err != nil {
		return err
	}
	if err := AssertIntegrationMultiMoneyAmountCustomerRequired(obj.AmountCustomer); err != nil {
		return err
	}
	return nil
}

// AssertRecurseIntegrationLineItemTotalDiscountsRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationLineItemTotalDiscounts (e.g. [][]IntegrationLineItemTotalDiscounts), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationLineItemTotalDiscountsRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationLineItemTotalDiscounts, ok := obj.(IntegrationLineItemTotalDiscounts)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationLineItemTotalDiscountsRequired(aIntegrationLineItemTotalDiscounts)
	})
}
