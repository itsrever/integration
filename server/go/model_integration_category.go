/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// IntegrationCategory - A category from the e-commerce catalog. It can be used to filter products or decide if a product is returnable or not.
type IntegrationCategory struct {

	Id string `json:"id"`
}

// AssertIntegrationCategoryRequired checks if the required fields are not zero-ed
func AssertIntegrationCategoryRequired(obj IntegrationCategory) error {
	elements := map[string]interface{}{
		"id": obj.Id,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseIntegrationCategoryRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationCategory (e.g. [][]IntegrationCategory), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationCategoryRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationCategory, ok := obj.(IntegrationCategory)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationCategoryRequired(aIntegrationCategory)
	})
}
