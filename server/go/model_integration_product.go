/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// IntegrationProduct - A product from the e-commerce catalog (enabled or not). Products that are removed from the catalog should still be available in the orders.
type IntegrationProduct struct {

	Categories []IntegrationCategory `json:"categories,omitempty"`

	// Product description
	Description string `json:"description,omitempty"`

	// Unique identifier for this resource in the source platform
	Id string `json:"id"`

	// Images associated to the product
	Images []IntegrationImage `json:"images,omitempty"`

	// Product name
	Name string `json:"name"`

	Price IntegrationProductPrice `json:"price"`

	// Product short description
	ShortDescription string `json:"short_description,omitempty"`

	// stock-keeping unit (SKU) is a scannable bar code, most often seen printed on product labels in a retail store. Should be present if there are no variants.
	Sku string `json:"sku,omitempty"`

	// Optional inventory quantity. Should be present if there are no variants.
	InventoryQuantity int32 `json:"inventory_quantity,omitempty"`

	// Optional tags associated to the product. They can be used to mark it as non-returnable.
	Tags []IntegrationTag `json:"tags,omitempty"`

	// All of the available product variations (if any). This is useful for offering exchanges of variants. If a `line_item`` references a variation, the attributes of the variation have to be used instead of the ones of the product
	Variants []IntegrationVariant `json:"variants,omitempty"`
}

// AssertIntegrationProductRequired checks if the required fields are not zero-ed
func AssertIntegrationProductRequired(obj IntegrationProduct) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"name": obj.Name,
		"price": obj.Price,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Categories {
		if err := AssertIntegrationCategoryRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Images {
		if err := AssertIntegrationImageRequired(el); err != nil {
			return err
		}
	}
	if err := AssertIntegrationProductPriceRequired(obj.Price); err != nil {
		return err
	}
	for _, el := range obj.Tags {
		if err := AssertIntegrationTagRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Variants {
		if err := AssertIntegrationVariantRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseIntegrationProductRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationProduct (e.g. [][]IntegrationProduct), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationProductRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationProduct, ok := obj.(IntegrationProduct)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationProductRequired(aIntegrationProduct)
	})
}
