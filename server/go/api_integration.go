/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"net/http"
	"strings"
)

// IntegrationApiController binds http requests to an api service and writes the service results to the http response
type IntegrationApiController struct {
	service      IntegrationApiServicer
	errorHandler ErrorHandler
}

// IntegrationApiOption for how the controller is set up.
type IntegrationApiOption func(*IntegrationApiController)

// WithIntegrationApiErrorHandler inject ErrorHandler into controller
func WithIntegrationApiErrorHandler(h ErrorHandler) IntegrationApiOption {
	return func(c *IntegrationApiController) {
		c.errorHandler = h
	}
}

// NewIntegrationApiController creates a default api controller
func NewIntegrationApiController(s IntegrationApiServicer, opts ...IntegrationApiOption) Router {
	controller := &IntegrationApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IntegrationApiController
func (c *IntegrationApiController) Routes() Routes {
	return Routes{
		{
			"FindOrderByCustomerPrintedOrderId",
			strings.ToUpper("Get"),
			"/integration/orders/find",
			c.FindOrderByCustomerPrintedOrderId,
		},
	}
}

// FindOrderByCustomerPrintedOrderId - Find Order by `customer_printed_order_id`
func (c *IntegrationApiController) FindOrderByCustomerPrintedOrderId(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	customerPrintedOrderIdParam := query.Get("customer_printed_order_id")
	result, err := c.service.FindOrderByCustomerPrintedOrderId(r.Context(), customerPrintedOrderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
