/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IntegrationApiController binds http requests to an api service and writes the service results to the http response
type IntegrationApiController struct {
	service IntegrationApiServicer
	errorHandler ErrorHandler
}

// IntegrationApiOption for how the controller is set up.
type IntegrationApiOption func(*IntegrationApiController)

// WithIntegrationApiErrorHandler inject ErrorHandler into controller
func WithIntegrationApiErrorHandler(h ErrorHandler) IntegrationApiOption {
	return func(c *IntegrationApiController) {
		c.errorHandler = h
	}
}

// NewIntegrationApiController creates a default api controller
func NewIntegrationApiController(s IntegrationApiServicer, opts ...IntegrationApiOption) Router {
	controller := &IntegrationApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IntegrationApiController
func (c *IntegrationApiController) Routes() Routes {
	return Routes{ 
		{
			"AddNoteToOrder",
			strings.ToUpper("Post"),
			"/integration/orders/{customer_printed_order_id}/note",
			c.AddNoteToOrder,
		},
		{
			"CreateOrUpdateReturn",
			strings.ToUpper("Put"),
			"/integration/orders/{customer_printed_order_id}/return",
			c.CreateOrUpdateReturn,
		},
		{
			"FindOrderByCustomerPrintedOrderId",
			strings.ToUpper("Get"),
			"/integration/orders/find",
			c.FindOrderByCustomerPrintedOrderId,
		},
	}
}

// AddNoteToOrder - Adds a note (text) to an existing order
func (c *IntegrationApiController) AddNoteToOrder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customerPrintedOrderIdParam := params["customer_printed_order_id"]
	
	addNoteToOrderRequestParam := AddNoteToOrderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addNoteToOrderRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddNoteToOrderRequestRequired(addNoteToOrderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddNoteToOrder(r.Context(), customerPrintedOrderIdParam, addNoteToOrderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateOrUpdateReturn - Creates or updates the returned items of an existing order
func (c *IntegrationApiController) CreateOrUpdateReturn(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customerPrintedOrderIdParam := params["customer_printed_order_id"]
	
	returnRequestParam := ReturnRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&returnRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReturnRequestRequired(returnRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateOrUpdateReturn(r.Context(), customerPrintedOrderIdParam, returnRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FindOrderByCustomerPrintedOrderId - Find Order by `customer_printed_order_id`
func (c *IntegrationApiController) FindOrderByCustomerPrintedOrderId(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	customerPrintedOrderIdParam := query.Get("customer_printed_order_id")
	result, err := c.service.FindOrderByCustomerPrintedOrderId(r.Context(), customerPrintedOrderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
