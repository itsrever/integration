/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// IntegrationVariantPrice - Unit price in the shop currency
type IntegrationVariantPrice struct {

	// amount (optionally with decimals), without currency symbol and thousands separator
	Amount float32 `json:"amount"`

	// three-letter code as ISO 4217 currency code.  Examples: EUR, USD, JPY, GBP... The currency must be supported by REVER. 
	Currency string `json:"currency"`
}

// AssertIntegrationVariantPriceRequired checks if the required fields are not zero-ed
func AssertIntegrationVariantPriceRequired(obj IntegrationVariantPrice) error {
	elements := map[string]interface{}{
		"amount": obj.Amount,
		"currency": obj.Currency,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseIntegrationVariantPriceRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationVariantPrice (e.g. [][]IntegrationVariantPrice), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationVariantPriceRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationVariantPrice, ok := obj.(IntegrationVariantPrice)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationVariantPriceRequired(aIntegrationVariantPrice)
	})
}
