/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"time"
)

// RefundOrder - A refund operation executed over one or more items of an order.  
type RefundOrder struct {

	// An optional text associated to the refund order
	Description string `json:"description,omitempty"`

	// Date when the refund was executed 
	Date time.Time `json:"date"`

	// Unique identifier of the refund order in the e-commerce 
	RefundId string `json:"refund_id"`

	// Optional identifier of the gateway transaction associated (payment refund) 
	TransactionId string `json:"transaction_id,omitempty"`

	Amount RefundOrderAmount `json:"amount"`

	// List of items refunded in this refund order 
	Refunds []Refund `json:"refunds"`
}

// AssertRefundOrderRequired checks if the required fields are not zero-ed
func AssertRefundOrderRequired(obj RefundOrder) error {
	elements := map[string]interface{}{
		"date": obj.Date,
		"refund_id": obj.RefundId,
		"amount": obj.Amount,
		"refunds": obj.Refunds,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertRefundOrderAmountRequired(obj.Amount); err != nil {
		return err
	}
	for _, el := range obj.Refunds {
		if err := AssertRefundRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseRefundOrderRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of RefundOrder (e.g. [][]RefundOrder), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRefundOrderRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRefundOrder, ok := obj.(RefundOrder)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRefundOrderRequired(aRefundOrder)
	})
}
