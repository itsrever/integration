/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// IntegrationVariant - A variant of a product from the e-commerce catalog. It's the combination of one or more option values (e.g. size or size + color)
type IntegrationVariant struct {

	// Variant description
	Description string `json:"description,omitempty"`

	// If this product variant should be selectable by the customer
	Enabled bool `json:"enabled"`

	// Unique identifier for the resource in the source platform
	Id string `json:"id"`

	// Images associated to the variant
	Images []IntegrationImage `json:"images,omitempty"`

	// optional inventory quantity. Replaces the one from the product
	InventoryQuantity int32 `json:"inventory_quantity,omitempty"`

	// Name of the variant
	Name string `json:"name"`

	// The list of options that conforms this variant
	Options []IntegrationOption `json:"options"`

	Price IntegrationVariantPrice `json:"price"`

	// Variant short description
	ShortDescription string `json:"short_description,omitempty"`

	// Optional unique identifier of the product as SKU. Replaces the one from the product.
	Sku string `json:"sku,omitempty"`

	// weight for this product variant, measured in grams. Replaces the one from the product.
	Weight int32 `json:"weight,omitempty"`
}

// AssertIntegrationVariantRequired checks if the required fields are not zero-ed
func AssertIntegrationVariantRequired(obj IntegrationVariant) error {
	elements := map[string]interface{}{
		"enabled": obj.Enabled,
		"id": obj.Id,
		"name": obj.Name,
		"options": obj.Options,
		"price": obj.Price,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Images {
		if err := AssertIntegrationImageRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Options {
		if err := AssertIntegrationOptionRequired(el); err != nil {
			return err
		}
	}
	if err := AssertIntegrationVariantPriceRequired(obj.Price); err != nil {
		return err
	}
	return nil
}

// AssertRecurseIntegrationVariantRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationVariant (e.g. [][]IntegrationVariant), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationVariantRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationVariant, ok := obj.(IntegrationVariant)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationVariantRequired(aIntegrationVariant)
	})
}
