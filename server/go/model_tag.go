/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// Tag - a tag (string) associated to one resource
type Tag struct {

	Name string `json:"name"`
}

// AssertTagRequired checks if the required fields are not zero-ed
func AssertTagRequired(obj Tag) error {
	elements := map[string]interface{}{
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTagRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Tag (e.g. [][]Tag), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTagRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTag, ok := obj.(Tag)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTagRequired(aTag)
	})
}
