/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"time"
)

// IntegrationFulfillment - Section to group the fulfillment information of the order
type IntegrationFulfillment struct {

	// Date when the order was fulfilled. This field should be present with a valid value if `is_fulfilled` is `true` 
	Date time.Time `json:"date,omitempty"`

	// If the order has been fulfilled. If partially fulfilled, this field should be `false` 
	IsFulfilled bool `json:"is_fulfilled"`
}

// AssertIntegrationFulfillmentRequired checks if the required fields are not zero-ed
func AssertIntegrationFulfillmentRequired(obj IntegrationFulfillment) error {
	elements := map[string]interface{}{
		"is_fulfilled": obj.IsFulfilled,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseIntegrationFulfillmentRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationFulfillment (e.g. [][]IntegrationFulfillment), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationFulfillmentRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationFulfillment, ok := obj.(IntegrationFulfillment)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationFulfillmentRequired(aIntegrationFulfillment)
	})
}
