/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

// RefundRequestItem - Items from an order being to be refunded.
type RefundRequestItem struct {

	// The unique identifier for the line item in the order.
	LineItemId string `json:"line_item_id"`

	// The quantity of the item to be refunded.
	Quantity int32 `json:"quantity"`

	Amount RefundRequestItemAmount `json:"amount"`
}

// AssertRefundRequestItemRequired checks if the required fields are not zero-ed
func AssertRefundRequestItemRequired(obj RefundRequestItem) error {
	elements := map[string]interface{}{
		"line_item_id": obj.LineItemId,
		"quantity": obj.Quantity,
		"amount": obj.Amount,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertRefundRequestItemAmountRequired(obj.Amount); err != nil {
		return err
	}
	return nil
}

// AssertRecurseRefundRequestItemRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of RefundRequestItem (e.g. [][]RefundRequestItem), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRefundRequestItemRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRefundRequestItem, ok := obj.(RefundRequestItem)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRefundRequestItemRequired(aRefundRequestItem)
	})
}
