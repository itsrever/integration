/*
 * Integration stubs
 *
 * Stubs for implementing a REVER integration
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"time"
)

// IntegrationReturnOrder - A return operation executed over one or more items of an order. It might be in progress or successfully completed. 
type IntegrationReturnOrder struct {

	// An optional text associated to the return order
	Description string `json:"description,omitempty"`

	// Date when the return was executed 
	Date time.Time `json:"date"`

	// Unique identifier of the return order 
	ReturnId string `json:"return_id"`

	// List of items returned in this return order 
	Returns []IntegrationReturn `json:"returns"`
}

// AssertIntegrationReturnOrderRequired checks if the required fields are not zero-ed
func AssertIntegrationReturnOrderRequired(obj IntegrationReturnOrder) error {
	elements := map[string]interface{}{
		"date": obj.Date,
		"return_id": obj.ReturnId,
		"returns": obj.Returns,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Returns {
		if err := AssertIntegrationReturnRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseIntegrationReturnOrderRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IntegrationReturnOrder (e.g. [][]IntegrationReturnOrder), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIntegrationReturnOrderRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIntegrationReturnOrder, ok := obj.(IntegrationReturnOrder)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIntegrationReturnOrderRequired(aIntegrationReturnOrder)
	})
}
