/*
Integration stubs

Stubs for implementing a REVER integration

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IntegrationShipping Shipping information
type IntegrationShipping struct {
	AmountShop *IntegrationShippingAmountShop `json:"amount_shop,omitempty"`
	AmountCustomer *IntegrationShippingAmountCustomer `json:"amount_customer,omitempty"`
}

// NewIntegrationShipping instantiates a new IntegrationShipping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationShipping() *IntegrationShipping {
	this := IntegrationShipping{}
	return &this
}

// NewIntegrationShippingWithDefaults instantiates a new IntegrationShipping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationShippingWithDefaults() *IntegrationShipping {
	this := IntegrationShipping{}
	return &this
}

// GetAmountShop returns the AmountShop field value if set, zero value otherwise.
func (o *IntegrationShipping) GetAmountShop() IntegrationShippingAmountShop {
	if o == nil || isNil(o.AmountShop) {
		var ret IntegrationShippingAmountShop
		return ret
	}
	return *o.AmountShop
}

// GetAmountShopOk returns a tuple with the AmountShop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationShipping) GetAmountShopOk() (*IntegrationShippingAmountShop, bool) {
	if o == nil || isNil(o.AmountShop) {
    return nil, false
	}
	return o.AmountShop, true
}

// HasAmountShop returns a boolean if a field has been set.
func (o *IntegrationShipping) HasAmountShop() bool {
	if o != nil && !isNil(o.AmountShop) {
		return true
	}

	return false
}

// SetAmountShop gets a reference to the given IntegrationShippingAmountShop and assigns it to the AmountShop field.
func (o *IntegrationShipping) SetAmountShop(v IntegrationShippingAmountShop) {
	o.AmountShop = &v
}

// GetAmountCustomer returns the AmountCustomer field value if set, zero value otherwise.
func (o *IntegrationShipping) GetAmountCustomer() IntegrationShippingAmountCustomer {
	if o == nil || isNil(o.AmountCustomer) {
		var ret IntegrationShippingAmountCustomer
		return ret
	}
	return *o.AmountCustomer
}

// GetAmountCustomerOk returns a tuple with the AmountCustomer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationShipping) GetAmountCustomerOk() (*IntegrationShippingAmountCustomer, bool) {
	if o == nil || isNil(o.AmountCustomer) {
    return nil, false
	}
	return o.AmountCustomer, true
}

// HasAmountCustomer returns a boolean if a field has been set.
func (o *IntegrationShipping) HasAmountCustomer() bool {
	if o != nil && !isNil(o.AmountCustomer) {
		return true
	}

	return false
}

// SetAmountCustomer gets a reference to the given IntegrationShippingAmountCustomer and assigns it to the AmountCustomer field.
func (o *IntegrationShipping) SetAmountCustomer(v IntegrationShippingAmountCustomer) {
	o.AmountCustomer = &v
}

func (o IntegrationShipping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AmountShop) {
		toSerialize["amount_shop"] = o.AmountShop
	}
	if !isNil(o.AmountCustomer) {
		toSerialize["amount_customer"] = o.AmountCustomer
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationShipping struct {
	value *IntegrationShipping
	isSet bool
}

func (v NullableIntegrationShipping) Get() *IntegrationShipping {
	return v.value
}

func (v *NullableIntegrationShipping) Set(val *IntegrationShipping) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationShipping) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationShipping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationShipping(val *IntegrationShipping) *NullableIntegrationShipping {
	return &NullableIntegrationShipping{value: val, isSet: true}
}

func (v NullableIntegrationShipping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationShipping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


