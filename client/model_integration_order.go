/*
Integration stubs

Stubs for implementing a REVER integration

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// IntegrationOrder Model for an Order returned by a custom integration. REVER supports multi-currency with the following restrictions:    * the shop currency must be the same for every order within the same e-commerce   * there must be only one customer currency per order (it can be the same or not than the shop currency)    
type IntegrationOrder struct {
	// Date when the Order was created in the e-commerce 
	Date time.Time `json:"date"`
	// Indicates if the taxes should be displayed as included in the total amount of the order or separated 
	TaxesIncluded bool `json:"taxes_included"`
	TotalAmountShop IntegrationOrderTotalAmountShop `json:"total_amount_shop"`
	TotalAmountCustomer IntegrationOrderTotalAmountCustomer `json:"total_amount_customer"`
	TotalTaxesShop IntegrationOrderTotalTaxesShop `json:"total_taxes_shop"`
	TotalTaxesCustomer IntegrationOrderTotalTaxesShop `json:"total_taxes_customer"`
	Fulfillment IntegrationOrderFulfillment `json:"fulfillment"`
	Payment IntegrationOrderPayment `json:"payment"`
	Customer IntegrationOrderCustomer `json:"customer"`
	Identification *IntegrationOrderIdentification `json:"identification,omitempty"`
	// List of items in the order. It should only include products or services,  not shipping costs. When working with international orders, the customer currency and shop currency might be different. As REVER supports multicurrency, 2 currencies  can be specified per `line_item`. However, all of the `line_items` must have the same shop and  customer currency.  
	LineItems []IntegrationOrderLineItem `json:"line_items"`
	ShippingAddress IntegrationOrderShippingAddress `json:"shipping_address"`
	BillingAddress IntegrationOrderBillingAddress `json:"billing_address"`
	Shipping IntegrationOrderShipping `json:"shipping"`
}

// NewIntegrationOrder instantiates a new IntegrationOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationOrder(date time.Time, taxesIncluded bool, totalAmountShop IntegrationOrderTotalAmountShop, totalAmountCustomer IntegrationOrderTotalAmountCustomer, totalTaxesShop IntegrationOrderTotalTaxesShop, totalTaxesCustomer IntegrationOrderTotalTaxesShop, fulfillment IntegrationOrderFulfillment, payment IntegrationOrderPayment, customer IntegrationOrderCustomer, lineItems []IntegrationOrderLineItem, shippingAddress IntegrationOrderShippingAddress, billingAddress IntegrationOrderBillingAddress, shipping IntegrationOrderShipping) *IntegrationOrder {
	this := IntegrationOrder{}
	this.Date = date
	this.TaxesIncluded = taxesIncluded
	this.TotalAmountShop = totalAmountShop
	this.TotalAmountCustomer = totalAmountCustomer
	this.TotalTaxesShop = totalTaxesShop
	this.TotalTaxesCustomer = totalTaxesCustomer
	this.Fulfillment = fulfillment
	this.Payment = payment
	this.Customer = customer
	this.LineItems = lineItems
	this.ShippingAddress = shippingAddress
	this.BillingAddress = billingAddress
	this.Shipping = shipping
	return &this
}

// NewIntegrationOrderWithDefaults instantiates a new IntegrationOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationOrderWithDefaults() *IntegrationOrder {
	this := IntegrationOrder{}
	return &this
}

// GetDate returns the Date field value
func (o *IntegrationOrder) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetDateOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *IntegrationOrder) SetDate(v time.Time) {
	o.Date = v
}

// GetTaxesIncluded returns the TaxesIncluded field value
func (o *IntegrationOrder) GetTaxesIncluded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TaxesIncluded
}

// GetTaxesIncludedOk returns a tuple with the TaxesIncluded field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetTaxesIncludedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TaxesIncluded, true
}

// SetTaxesIncluded sets field value
func (o *IntegrationOrder) SetTaxesIncluded(v bool) {
	o.TaxesIncluded = v
}

// GetTotalAmountShop returns the TotalAmountShop field value
func (o *IntegrationOrder) GetTotalAmountShop() IntegrationOrderTotalAmountShop {
	if o == nil {
		var ret IntegrationOrderTotalAmountShop
		return ret
	}

	return o.TotalAmountShop
}

// GetTotalAmountShopOk returns a tuple with the TotalAmountShop field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetTotalAmountShopOk() (*IntegrationOrderTotalAmountShop, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TotalAmountShop, true
}

// SetTotalAmountShop sets field value
func (o *IntegrationOrder) SetTotalAmountShop(v IntegrationOrderTotalAmountShop) {
	o.TotalAmountShop = v
}

// GetTotalAmountCustomer returns the TotalAmountCustomer field value
func (o *IntegrationOrder) GetTotalAmountCustomer() IntegrationOrderTotalAmountCustomer {
	if o == nil {
		var ret IntegrationOrderTotalAmountCustomer
		return ret
	}

	return o.TotalAmountCustomer
}

// GetTotalAmountCustomerOk returns a tuple with the TotalAmountCustomer field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetTotalAmountCustomerOk() (*IntegrationOrderTotalAmountCustomer, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TotalAmountCustomer, true
}

// SetTotalAmountCustomer sets field value
func (o *IntegrationOrder) SetTotalAmountCustomer(v IntegrationOrderTotalAmountCustomer) {
	o.TotalAmountCustomer = v
}

// GetTotalTaxesShop returns the TotalTaxesShop field value
func (o *IntegrationOrder) GetTotalTaxesShop() IntegrationOrderTotalTaxesShop {
	if o == nil {
		var ret IntegrationOrderTotalTaxesShop
		return ret
	}

	return o.TotalTaxesShop
}

// GetTotalTaxesShopOk returns a tuple with the TotalTaxesShop field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetTotalTaxesShopOk() (*IntegrationOrderTotalTaxesShop, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TotalTaxesShop, true
}

// SetTotalTaxesShop sets field value
func (o *IntegrationOrder) SetTotalTaxesShop(v IntegrationOrderTotalTaxesShop) {
	o.TotalTaxesShop = v
}

// GetTotalTaxesCustomer returns the TotalTaxesCustomer field value
func (o *IntegrationOrder) GetTotalTaxesCustomer() IntegrationOrderTotalTaxesShop {
	if o == nil {
		var ret IntegrationOrderTotalTaxesShop
		return ret
	}

	return o.TotalTaxesCustomer
}

// GetTotalTaxesCustomerOk returns a tuple with the TotalTaxesCustomer field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetTotalTaxesCustomerOk() (*IntegrationOrderTotalTaxesShop, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TotalTaxesCustomer, true
}

// SetTotalTaxesCustomer sets field value
func (o *IntegrationOrder) SetTotalTaxesCustomer(v IntegrationOrderTotalTaxesShop) {
	o.TotalTaxesCustomer = v
}

// GetFulfillment returns the Fulfillment field value
func (o *IntegrationOrder) GetFulfillment() IntegrationOrderFulfillment {
	if o == nil {
		var ret IntegrationOrderFulfillment
		return ret
	}

	return o.Fulfillment
}

// GetFulfillmentOk returns a tuple with the Fulfillment field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetFulfillmentOk() (*IntegrationOrderFulfillment, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Fulfillment, true
}

// SetFulfillment sets field value
func (o *IntegrationOrder) SetFulfillment(v IntegrationOrderFulfillment) {
	o.Fulfillment = v
}

// GetPayment returns the Payment field value
func (o *IntegrationOrder) GetPayment() IntegrationOrderPayment {
	if o == nil {
		var ret IntegrationOrderPayment
		return ret
	}

	return o.Payment
}

// GetPaymentOk returns a tuple with the Payment field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetPaymentOk() (*IntegrationOrderPayment, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Payment, true
}

// SetPayment sets field value
func (o *IntegrationOrder) SetPayment(v IntegrationOrderPayment) {
	o.Payment = v
}

// GetCustomer returns the Customer field value
func (o *IntegrationOrder) GetCustomer() IntegrationOrderCustomer {
	if o == nil {
		var ret IntegrationOrderCustomer
		return ret
	}

	return o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetCustomerOk() (*IntegrationOrderCustomer, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Customer, true
}

// SetCustomer sets field value
func (o *IntegrationOrder) SetCustomer(v IntegrationOrderCustomer) {
	o.Customer = v
}

// GetIdentification returns the Identification field value if set, zero value otherwise.
func (o *IntegrationOrder) GetIdentification() IntegrationOrderIdentification {
	if o == nil || isNil(o.Identification) {
		var ret IntegrationOrderIdentification
		return ret
	}
	return *o.Identification
}

// GetIdentificationOk returns a tuple with the Identification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetIdentificationOk() (*IntegrationOrderIdentification, bool) {
	if o == nil || isNil(o.Identification) {
    return nil, false
	}
	return o.Identification, true
}

// HasIdentification returns a boolean if a field has been set.
func (o *IntegrationOrder) HasIdentification() bool {
	if o != nil && !isNil(o.Identification) {
		return true
	}

	return false
}

// SetIdentification gets a reference to the given IntegrationOrderIdentification and assigns it to the Identification field.
func (o *IntegrationOrder) SetIdentification(v IntegrationOrderIdentification) {
	o.Identification = &v
}

// GetLineItems returns the LineItems field value
func (o *IntegrationOrder) GetLineItems() []IntegrationOrderLineItem {
	if o == nil {
		var ret []IntegrationOrderLineItem
		return ret
	}

	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetLineItemsOk() ([]IntegrationOrderLineItem, bool) {
	if o == nil {
    return nil, false
	}
	return o.LineItems, true
}

// SetLineItems sets field value
func (o *IntegrationOrder) SetLineItems(v []IntegrationOrderLineItem) {
	o.LineItems = v
}

// GetShippingAddress returns the ShippingAddress field value
func (o *IntegrationOrder) GetShippingAddress() IntegrationOrderShippingAddress {
	if o == nil {
		var ret IntegrationOrderShippingAddress
		return ret
	}

	return o.ShippingAddress
}

// GetShippingAddressOk returns a tuple with the ShippingAddress field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetShippingAddressOk() (*IntegrationOrderShippingAddress, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ShippingAddress, true
}

// SetShippingAddress sets field value
func (o *IntegrationOrder) SetShippingAddress(v IntegrationOrderShippingAddress) {
	o.ShippingAddress = v
}

// GetBillingAddress returns the BillingAddress field value
func (o *IntegrationOrder) GetBillingAddress() IntegrationOrderBillingAddress {
	if o == nil {
		var ret IntegrationOrderBillingAddress
		return ret
	}

	return o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetBillingAddressOk() (*IntegrationOrderBillingAddress, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BillingAddress, true
}

// SetBillingAddress sets field value
func (o *IntegrationOrder) SetBillingAddress(v IntegrationOrderBillingAddress) {
	o.BillingAddress = v
}

// GetShipping returns the Shipping field value
func (o *IntegrationOrder) GetShipping() IntegrationOrderShipping {
	if o == nil {
		var ret IntegrationOrderShipping
		return ret
	}

	return o.Shipping
}

// GetShippingOk returns a tuple with the Shipping field value
// and a boolean to check if the value has been set.
func (o *IntegrationOrder) GetShippingOk() (*IntegrationOrderShipping, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Shipping, true
}

// SetShipping sets field value
func (o *IntegrationOrder) SetShipping(v IntegrationOrderShipping) {
	o.Shipping = v
}

func (o IntegrationOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["taxes_included"] = o.TaxesIncluded
	}
	if true {
		toSerialize["total_amount_shop"] = o.TotalAmountShop
	}
	if true {
		toSerialize["total_amount_customer"] = o.TotalAmountCustomer
	}
	if true {
		toSerialize["total_taxes_shop"] = o.TotalTaxesShop
	}
	if true {
		toSerialize["total_taxes_customer"] = o.TotalTaxesCustomer
	}
	if true {
		toSerialize["fulfillment"] = o.Fulfillment
	}
	if true {
		toSerialize["payment"] = o.Payment
	}
	if true {
		toSerialize["customer"] = o.Customer
	}
	if !isNil(o.Identification) {
		toSerialize["identification"] = o.Identification
	}
	if true {
		toSerialize["line_items"] = o.LineItems
	}
	if true {
		toSerialize["shipping_address"] = o.ShippingAddress
	}
	if true {
		toSerialize["billing_address"] = o.BillingAddress
	}
	if true {
		toSerialize["shipping"] = o.Shipping
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationOrder struct {
	value *IntegrationOrder
	isSet bool
}

func (v NullableIntegrationOrder) Get() *IntegrationOrder {
	return v.value
}

func (v *NullableIntegrationOrder) Set(val *IntegrationOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationOrder(val *IntegrationOrder) *NullableIntegrationOrder {
	return &NullableIntegrationOrder{value: val, isSet: true}
}

func (v NullableIntegrationOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


