/*
Integration stubs

Stubs for implementing a REVER integration

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// IntegrationOrderPayment Payment information for the order
type IntegrationOrderPayment struct {
	// Date when the payment for the whole order was made. This field should be present with a valid value if the order has been fully paid (not just partially). 
	Date *time.Time `json:"date,omitempty"`
	// List of transactions executed as payment for the order.  If the order is `fully_paid`, then this list should have at least one element. 
	Transactions []IntegrationPaymentTransaction `json:"transactions,omitempty"`
}

// NewIntegrationOrderPayment instantiates a new IntegrationOrderPayment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationOrderPayment() *IntegrationOrderPayment {
	this := IntegrationOrderPayment{}
	return &this
}

// NewIntegrationOrderPaymentWithDefaults instantiates a new IntegrationOrderPayment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationOrderPaymentWithDefaults() *IntegrationOrderPayment {
	this := IntegrationOrderPayment{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *IntegrationOrderPayment) GetDate() time.Time {
	if o == nil || isNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderPayment) GetDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.Date) {
    return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *IntegrationOrderPayment) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *IntegrationOrderPayment) SetDate(v time.Time) {
	o.Date = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *IntegrationOrderPayment) GetTransactions() []IntegrationPaymentTransaction {
	if o == nil || isNil(o.Transactions) {
		var ret []IntegrationPaymentTransaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderPayment) GetTransactionsOk() ([]IntegrationPaymentTransaction, bool) {
	if o == nil || isNil(o.Transactions) {
    return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *IntegrationOrderPayment) HasTransactions() bool {
	if o != nil && !isNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []IntegrationPaymentTransaction and assigns it to the Transactions field.
func (o *IntegrationOrderPayment) SetTransactions(v []IntegrationPaymentTransaction) {
	o.Transactions = v
}

func (o IntegrationOrderPayment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationOrderPayment struct {
	value *IntegrationOrderPayment
	isSet bool
}

func (v NullableIntegrationOrderPayment) Get() *IntegrationOrderPayment {
	return v.value
}

func (v *NullableIntegrationOrderPayment) Set(val *IntegrationOrderPayment) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationOrderPayment) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationOrderPayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationOrderPayment(val *IntegrationOrderPayment) *NullableIntegrationOrderPayment {
	return &NullableIntegrationOrderPayment{value: val, isSet: true}
}

func (v NullableIntegrationOrderPayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationOrderPayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


