/*
Integration stubs

Stubs for implementing a REVER integration

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IntegrationOrderLineItem One of the line items from the Order
type IntegrationOrderLineItem struct {
	// Optional: when a customer send some comments
	Comment *string `json:"comment,omitempty"`
	// Id of the line item in the source platform
	Id *string `json:"id,omitempty"`
	// Name of the line item (not necessarily the name of the product)
	Name *string `json:"name,omitempty"`
	Product *IntegrationProduct `json:"product,omitempty"`
	// to get product details, request the product (API)
	ProductId *string `json:"product_id,omitempty"`
	// number of items of the same product + variant
	Quantity *int32 `json:"quantity,omitempty"`
	// stock-keeping unit (SKU) is a scannable bar code, most often seen printed on product labels in a retail store
	Sku *string `json:"sku,omitempty"`
	// sub total amount of the line following the MoneyFormat of the order before discounts and taxes subtotal = unit_price * quantity
	Subtotal *int32 `json:"subtotal,omitempty"`
	// total amount of the line following the MoneyFormat of the order including discounts and tax total = (subtotal - total_discounts) + total_taxes this is the amount to be refunded (multiplied by items_returned/quantity)
	Total *int32 `json:"total,omitempty"`
	// total amount of discounts of the line following the MoneyFormat
	TotalDiscounts *int32 `json:"total_discounts,omitempty"`
	// total amount of taxes of the line following the MoneyFormat
	TotalTaxes *int32 `json:"total_taxes,omitempty"`
	// unit price of a single  item (no discounts, no taxes) follows MoneyFormat associated WARNING: This price can have roundings as some platforms only share the unit_price + taxes. Depending on the use case might be better to use the total directly and add/substract taxes/discounts
	UnitPrice *int32 `json:"unit_price,omitempty"`
	// variant of the product (same ProductID, different Variant) we are allowing only one variant at the moment (one dimension)
	VariantId *string `json:"variant_id,omitempty"`
	// Name of the variant
	VariantName *string `json:"variant_name,omitempty"`
	// weight for products from the order
	Weight *int32 `json:"weight,omitempty"`
}

// NewIntegrationOrderLineItem instantiates a new IntegrationOrderLineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationOrderLineItem() *IntegrationOrderLineItem {
	this := IntegrationOrderLineItem{}
	return &this
}

// NewIntegrationOrderLineItemWithDefaults instantiates a new IntegrationOrderLineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationOrderLineItemWithDefaults() *IntegrationOrderLineItem {
	this := IntegrationOrderLineItem{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetComment() string {
	if o == nil || isNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetCommentOk() (*string, bool) {
	if o == nil || isNil(o.Comment) {
    return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *IntegrationOrderLineItem) SetComment(v string) {
	o.Comment = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IntegrationOrderLineItem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationOrderLineItem) SetName(v string) {
	o.Name = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetProduct() IntegrationProduct {
	if o == nil || isNil(o.Product) {
		var ret IntegrationProduct
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetProductOk() (*IntegrationProduct, bool) {
	if o == nil || isNil(o.Product) {
    return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasProduct() bool {
	if o != nil && !isNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given IntegrationProduct and assigns it to the Product field.
func (o *IntegrationOrderLineItem) SetProduct(v IntegrationProduct) {
	o.Product = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetProductId() string {
	if o == nil || isNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetProductIdOk() (*string, bool) {
	if o == nil || isNil(o.ProductId) {
    return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasProductId() bool {
	if o != nil && !isNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *IntegrationOrderLineItem) SetProductId(v string) {
	o.ProductId = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetQuantity() int32 {
	if o == nil || isNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetQuantityOk() (*int32, bool) {
	if o == nil || isNil(o.Quantity) {
    return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasQuantity() bool {
	if o != nil && !isNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *IntegrationOrderLineItem) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetSku() string {
	if o == nil || isNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetSkuOk() (*string, bool) {
	if o == nil || isNil(o.Sku) {
    return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasSku() bool {
	if o != nil && !isNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *IntegrationOrderLineItem) SetSku(v string) {
	o.Sku = &v
}

// GetSubtotal returns the Subtotal field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetSubtotal() int32 {
	if o == nil || isNil(o.Subtotal) {
		var ret int32
		return ret
	}
	return *o.Subtotal
}

// GetSubtotalOk returns a tuple with the Subtotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetSubtotalOk() (*int32, bool) {
	if o == nil || isNil(o.Subtotal) {
    return nil, false
	}
	return o.Subtotal, true
}

// HasSubtotal returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasSubtotal() bool {
	if o != nil && !isNil(o.Subtotal) {
		return true
	}

	return false
}

// SetSubtotal gets a reference to the given int32 and assigns it to the Subtotal field.
func (o *IntegrationOrderLineItem) SetSubtotal(v int32) {
	o.Subtotal = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetTotal() int32 {
	if o == nil || isNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetTotalOk() (*int32, bool) {
	if o == nil || isNil(o.Total) {
    return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *IntegrationOrderLineItem) SetTotal(v int32) {
	o.Total = &v
}

// GetTotalDiscounts returns the TotalDiscounts field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetTotalDiscounts() int32 {
	if o == nil || isNil(o.TotalDiscounts) {
		var ret int32
		return ret
	}
	return *o.TotalDiscounts
}

// GetTotalDiscountsOk returns a tuple with the TotalDiscounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetTotalDiscountsOk() (*int32, bool) {
	if o == nil || isNil(o.TotalDiscounts) {
    return nil, false
	}
	return o.TotalDiscounts, true
}

// HasTotalDiscounts returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasTotalDiscounts() bool {
	if o != nil && !isNil(o.TotalDiscounts) {
		return true
	}

	return false
}

// SetTotalDiscounts gets a reference to the given int32 and assigns it to the TotalDiscounts field.
func (o *IntegrationOrderLineItem) SetTotalDiscounts(v int32) {
	o.TotalDiscounts = &v
}

// GetTotalTaxes returns the TotalTaxes field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetTotalTaxes() int32 {
	if o == nil || isNil(o.TotalTaxes) {
		var ret int32
		return ret
	}
	return *o.TotalTaxes
}

// GetTotalTaxesOk returns a tuple with the TotalTaxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetTotalTaxesOk() (*int32, bool) {
	if o == nil || isNil(o.TotalTaxes) {
    return nil, false
	}
	return o.TotalTaxes, true
}

// HasTotalTaxes returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasTotalTaxes() bool {
	if o != nil && !isNil(o.TotalTaxes) {
		return true
	}

	return false
}

// SetTotalTaxes gets a reference to the given int32 and assigns it to the TotalTaxes field.
func (o *IntegrationOrderLineItem) SetTotalTaxes(v int32) {
	o.TotalTaxes = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetUnitPrice() int32 {
	if o == nil || isNil(o.UnitPrice) {
		var ret int32
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetUnitPriceOk() (*int32, bool) {
	if o == nil || isNil(o.UnitPrice) {
    return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasUnitPrice() bool {
	if o != nil && !isNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given int32 and assigns it to the UnitPrice field.
func (o *IntegrationOrderLineItem) SetUnitPrice(v int32) {
	o.UnitPrice = &v
}

// GetVariantId returns the VariantId field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetVariantId() string {
	if o == nil || isNil(o.VariantId) {
		var ret string
		return ret
	}
	return *o.VariantId
}

// GetVariantIdOk returns a tuple with the VariantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetVariantIdOk() (*string, bool) {
	if o == nil || isNil(o.VariantId) {
    return nil, false
	}
	return o.VariantId, true
}

// HasVariantId returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasVariantId() bool {
	if o != nil && !isNil(o.VariantId) {
		return true
	}

	return false
}

// SetVariantId gets a reference to the given string and assigns it to the VariantId field.
func (o *IntegrationOrderLineItem) SetVariantId(v string) {
	o.VariantId = &v
}

// GetVariantName returns the VariantName field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetVariantName() string {
	if o == nil || isNil(o.VariantName) {
		var ret string
		return ret
	}
	return *o.VariantName
}

// GetVariantNameOk returns a tuple with the VariantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetVariantNameOk() (*string, bool) {
	if o == nil || isNil(o.VariantName) {
    return nil, false
	}
	return o.VariantName, true
}

// HasVariantName returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasVariantName() bool {
	if o != nil && !isNil(o.VariantName) {
		return true
	}

	return false
}

// SetVariantName gets a reference to the given string and assigns it to the VariantName field.
func (o *IntegrationOrderLineItem) SetVariantName(v string) {
	o.VariantName = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *IntegrationOrderLineItem) GetWeight() int32 {
	if o == nil || isNil(o.Weight) {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderLineItem) GetWeightOk() (*int32, bool) {
	if o == nil || isNil(o.Weight) {
    return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *IntegrationOrderLineItem) HasWeight() bool {
	if o != nil && !isNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *IntegrationOrderLineItem) SetWeight(v int32) {
	o.Weight = &v
}

func (o IntegrationOrderLineItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !isNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !isNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !isNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !isNil(o.Subtotal) {
		toSerialize["subtotal"] = o.Subtotal
	}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !isNil(o.TotalDiscounts) {
		toSerialize["total_discounts"] = o.TotalDiscounts
	}
	if !isNil(o.TotalTaxes) {
		toSerialize["total_taxes"] = o.TotalTaxes
	}
	if !isNil(o.UnitPrice) {
		toSerialize["unit_price"] = o.UnitPrice
	}
	if !isNil(o.VariantId) {
		toSerialize["variant_id"] = o.VariantId
	}
	if !isNil(o.VariantName) {
		toSerialize["variant_name"] = o.VariantName
	}
	if !isNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationOrderLineItem struct {
	value *IntegrationOrderLineItem
	isSet bool
}

func (v NullableIntegrationOrderLineItem) Get() *IntegrationOrderLineItem {
	return v.value
}

func (v *NullableIntegrationOrderLineItem) Set(val *IntegrationOrderLineItem) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationOrderLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationOrderLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationOrderLineItem(val *IntegrationOrderLineItem) *NullableIntegrationOrderLineItem {
	return &NullableIntegrationOrderLineItem{value: val, isSet: true}
}

func (v NullableIntegrationOrderLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationOrderLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


