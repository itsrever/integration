/*
Integration stubs

Stubs for implementing a REVER integration

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IntegrationProductCategory struct for IntegrationProductCategory
type IntegrationProductCategory struct {
	Id *string `json:"id,omitempty"`
}

// NewIntegrationProductCategory instantiates a new IntegrationProductCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationProductCategory() *IntegrationProductCategory {
	this := IntegrationProductCategory{}
	return &this
}

// NewIntegrationProductCategoryWithDefaults instantiates a new IntegrationProductCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationProductCategoryWithDefaults() *IntegrationProductCategory {
	this := IntegrationProductCategory{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IntegrationProductCategory) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductCategory) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IntegrationProductCategory) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IntegrationProductCategory) SetId(v string) {
	o.Id = &v
}

func (o IntegrationProductCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationProductCategory struct {
	value *IntegrationProductCategory
	isSet bool
}

func (v NullableIntegrationProductCategory) Get() *IntegrationProductCategory {
	return v.value
}

func (v *NullableIntegrationProductCategory) Set(val *IntegrationProductCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationProductCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationProductCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationProductCategory(val *IntegrationProductCategory) *NullableIntegrationProductCategory {
	return &NullableIntegrationProductCategory{value: val, isSet: true}
}

func (v NullableIntegrationProductCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationProductCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


