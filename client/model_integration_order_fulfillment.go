/*
Integration stubs

Stubs for implementing a REVER integration

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// IntegrationOrderFulfillment Section to group the fulfillment information of the order
type IntegrationOrderFulfillment struct {
	// Date when the order was fulfilled. This field should be present with a valid value if `is_fulfilled` is `true` 
	Date *time.Time `json:"date,omitempty"`
	// If the order has been fulfilled. If partially fulfilled, this field should be `false` 
	IsFulfilled *bool `json:"is_fulfilled,omitempty"`
}

// NewIntegrationOrderFulfillment instantiates a new IntegrationOrderFulfillment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationOrderFulfillment() *IntegrationOrderFulfillment {
	this := IntegrationOrderFulfillment{}
	return &this
}

// NewIntegrationOrderFulfillmentWithDefaults instantiates a new IntegrationOrderFulfillment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationOrderFulfillmentWithDefaults() *IntegrationOrderFulfillment {
	this := IntegrationOrderFulfillment{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *IntegrationOrderFulfillment) GetDate() time.Time {
	if o == nil || isNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderFulfillment) GetDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.Date) {
    return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *IntegrationOrderFulfillment) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *IntegrationOrderFulfillment) SetDate(v time.Time) {
	o.Date = &v
}

// GetIsFulfilled returns the IsFulfilled field value if set, zero value otherwise.
func (o *IntegrationOrderFulfillment) GetIsFulfilled() bool {
	if o == nil || isNil(o.IsFulfilled) {
		var ret bool
		return ret
	}
	return *o.IsFulfilled
}

// GetIsFulfilledOk returns a tuple with the IsFulfilled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationOrderFulfillment) GetIsFulfilledOk() (*bool, bool) {
	if o == nil || isNil(o.IsFulfilled) {
    return nil, false
	}
	return o.IsFulfilled, true
}

// HasIsFulfilled returns a boolean if a field has been set.
func (o *IntegrationOrderFulfillment) HasIsFulfilled() bool {
	if o != nil && !isNil(o.IsFulfilled) {
		return true
	}

	return false
}

// SetIsFulfilled gets a reference to the given bool and assigns it to the IsFulfilled field.
func (o *IntegrationOrderFulfillment) SetIsFulfilled(v bool) {
	o.IsFulfilled = &v
}

func (o IntegrationOrderFulfillment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.IsFulfilled) {
		toSerialize["is_fulfilled"] = o.IsFulfilled
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationOrderFulfillment struct {
	value *IntegrationOrderFulfillment
	isSet bool
}

func (v NullableIntegrationOrderFulfillment) Get() *IntegrationOrderFulfillment {
	return v.value
}

func (v *NullableIntegrationOrderFulfillment) Set(val *IntegrationOrderFulfillment) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationOrderFulfillment) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationOrderFulfillment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationOrderFulfillment(val *IntegrationOrderFulfillment) *NullableIntegrationOrderFulfillment {
	return &NullableIntegrationOrderFulfillment{value: val, isSet: true}
}

func (v NullableIntegrationOrderFulfillment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationOrderFulfillment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


