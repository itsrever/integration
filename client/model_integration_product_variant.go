/*
Integration stubs

Stubs for implementing a REVER integration

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IntegrationProductVariant struct for IntegrationProductVariant
type IntegrationProductVariant struct {
	// Variant description
	Description *string `json:"description,omitempty"`
	// enabled or disabled
	Enabled *bool `json:"enabled,omitempty"`
	// Unique identifier for the resource in the source platform
	Id *string `json:"id,omitempty"`
	// Images associated to the variant
	Images []IntegrationProductImage `json:"images,omitempty"`
	// inventory quantity (only check if inventory_enabled is true)
	InventoryQuantity *int32 `json:"inventory_quantity,omitempty"`
	// should be checked before checking quantity
	IsInventoryEnabled *bool `json:"is_inventory_enabled,omitempty"`
	// Name of the variant
	Name *string `json:"name,omitempty"`
	// The list of options that conforms this variant
	Options []IntegrationProductOption `json:"options,omitempty"`
	// unit price
	Price *int32 `json:"price,omitempty"`
	// Variant short description
	ShortDescription *string `json:"short_description,omitempty"`
	// unique identifier of the product
	Sku *string `json:"sku,omitempty"`
	// weight for product
	Weight *int32 `json:"weight,omitempty"`
}

// NewIntegrationProductVariant instantiates a new IntegrationProductVariant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationProductVariant() *IntegrationProductVariant {
	this := IntegrationProductVariant{}
	return &this
}

// NewIntegrationProductVariantWithDefaults instantiates a new IntegrationProductVariant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationProductVariantWithDefaults() *IntegrationProductVariant {
	this := IntegrationProductVariant{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IntegrationProductVariant) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IntegrationProductVariant) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IntegrationProductVariant) SetId(v string) {
	o.Id = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetImages() []IntegrationProductImage {
	if o == nil || isNil(o.Images) {
		var ret []IntegrationProductImage
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetImagesOk() ([]IntegrationProductImage, bool) {
	if o == nil || isNil(o.Images) {
    return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasImages() bool {
	if o != nil && !isNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []IntegrationProductImage and assigns it to the Images field.
func (o *IntegrationProductVariant) SetImages(v []IntegrationProductImage) {
	o.Images = v
}

// GetInventoryQuantity returns the InventoryQuantity field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetInventoryQuantity() int32 {
	if o == nil || isNil(o.InventoryQuantity) {
		var ret int32
		return ret
	}
	return *o.InventoryQuantity
}

// GetInventoryQuantityOk returns a tuple with the InventoryQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetInventoryQuantityOk() (*int32, bool) {
	if o == nil || isNil(o.InventoryQuantity) {
    return nil, false
	}
	return o.InventoryQuantity, true
}

// HasInventoryQuantity returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasInventoryQuantity() bool {
	if o != nil && !isNil(o.InventoryQuantity) {
		return true
	}

	return false
}

// SetInventoryQuantity gets a reference to the given int32 and assigns it to the InventoryQuantity field.
func (o *IntegrationProductVariant) SetInventoryQuantity(v int32) {
	o.InventoryQuantity = &v
}

// GetIsInventoryEnabled returns the IsInventoryEnabled field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetIsInventoryEnabled() bool {
	if o == nil || isNil(o.IsInventoryEnabled) {
		var ret bool
		return ret
	}
	return *o.IsInventoryEnabled
}

// GetIsInventoryEnabledOk returns a tuple with the IsInventoryEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetIsInventoryEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.IsInventoryEnabled) {
    return nil, false
	}
	return o.IsInventoryEnabled, true
}

// HasIsInventoryEnabled returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasIsInventoryEnabled() bool {
	if o != nil && !isNil(o.IsInventoryEnabled) {
		return true
	}

	return false
}

// SetIsInventoryEnabled gets a reference to the given bool and assigns it to the IsInventoryEnabled field.
func (o *IntegrationProductVariant) SetIsInventoryEnabled(v bool) {
	o.IsInventoryEnabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationProductVariant) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetOptions() []IntegrationProductOption {
	if o == nil || isNil(o.Options) {
		var ret []IntegrationProductOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetOptionsOk() ([]IntegrationProductOption, bool) {
	if o == nil || isNil(o.Options) {
    return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []IntegrationProductOption and assigns it to the Options field.
func (o *IntegrationProductVariant) SetOptions(v []IntegrationProductOption) {
	o.Options = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetPrice() int32 {
	if o == nil || isNil(o.Price) {
		var ret int32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetPriceOk() (*int32, bool) {
	if o == nil || isNil(o.Price) {
    return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasPrice() bool {
	if o != nil && !isNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int32 and assigns it to the Price field.
func (o *IntegrationProductVariant) SetPrice(v int32) {
	o.Price = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetShortDescription() string {
	if o == nil || isNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetShortDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.ShortDescription) {
    return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasShortDescription() bool {
	if o != nil && !isNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *IntegrationProductVariant) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetSku() string {
	if o == nil || isNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetSkuOk() (*string, bool) {
	if o == nil || isNil(o.Sku) {
    return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasSku() bool {
	if o != nil && !isNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *IntegrationProductVariant) SetSku(v string) {
	o.Sku = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *IntegrationProductVariant) GetWeight() int32 {
	if o == nil || isNil(o.Weight) {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductVariant) GetWeightOk() (*int32, bool) {
	if o == nil || isNil(o.Weight) {
    return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *IntegrationProductVariant) HasWeight() bool {
	if o != nil && !isNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *IntegrationProductVariant) SetWeight(v int32) {
	o.Weight = &v
}

func (o IntegrationProductVariant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !isNil(o.InventoryQuantity) {
		toSerialize["inventory_quantity"] = o.InventoryQuantity
	}
	if !isNil(o.IsInventoryEnabled) {
		toSerialize["is_inventory_enabled"] = o.IsInventoryEnabled
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !isNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !isNil(o.ShortDescription) {
		toSerialize["short_description"] = o.ShortDescription
	}
	if !isNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !isNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationProductVariant struct {
	value *IntegrationProductVariant
	isSet bool
}

func (v NullableIntegrationProductVariant) Get() *IntegrationProductVariant {
	return v.value
}

func (v *NullableIntegrationProductVariant) Set(val *IntegrationProductVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationProductVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationProductVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationProductVariant(val *IntegrationProductVariant) *NullableIntegrationProductVariant {
	return &NullableIntegrationProductVariant{value: val, isSet: true}
}

func (v NullableIntegrationProductVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationProductVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


