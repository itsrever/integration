/*
Integration stubs

Stubs for implementing a REVER integration

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IntegrationProductImage An image from the e-commerce catalog
type IntegrationProductImage struct {
	// Image alternative text
	Alt *string `json:"alt,omitempty"`
	// Image name
	Name *string `json:"name,omitempty"`
	// Image URL
	Src *string `json:"src,omitempty"`
}

// NewIntegrationProductImage instantiates a new IntegrationProductImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationProductImage() *IntegrationProductImage {
	this := IntegrationProductImage{}
	return &this
}

// NewIntegrationProductImageWithDefaults instantiates a new IntegrationProductImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationProductImageWithDefaults() *IntegrationProductImage {
	this := IntegrationProductImage{}
	return &this
}

// GetAlt returns the Alt field value if set, zero value otherwise.
func (o *IntegrationProductImage) GetAlt() string {
	if o == nil || isNil(o.Alt) {
		var ret string
		return ret
	}
	return *o.Alt
}

// GetAltOk returns a tuple with the Alt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductImage) GetAltOk() (*string, bool) {
	if o == nil || isNil(o.Alt) {
    return nil, false
	}
	return o.Alt, true
}

// HasAlt returns a boolean if a field has been set.
func (o *IntegrationProductImage) HasAlt() bool {
	if o != nil && !isNil(o.Alt) {
		return true
	}

	return false
}

// SetAlt gets a reference to the given string and assigns it to the Alt field.
func (o *IntegrationProductImage) SetAlt(v string) {
	o.Alt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationProductImage) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductImage) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationProductImage) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationProductImage) SetName(v string) {
	o.Name = &v
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *IntegrationProductImage) GetSrc() string {
	if o == nil || isNil(o.Src) {
		var ret string
		return ret
	}
	return *o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationProductImage) GetSrcOk() (*string, bool) {
	if o == nil || isNil(o.Src) {
    return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *IntegrationProductImage) HasSrc() bool {
	if o != nil && !isNil(o.Src) {
		return true
	}

	return false
}

// SetSrc gets a reference to the given string and assigns it to the Src field.
func (o *IntegrationProductImage) SetSrc(v string) {
	o.Src = &v
}

func (o IntegrationProductImage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Alt) {
		toSerialize["alt"] = o.Alt
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Src) {
		toSerialize["src"] = o.Src
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationProductImage struct {
	value *IntegrationProductImage
	isSet bool
}

func (v NullableIntegrationProductImage) Get() *IntegrationProductImage {
	return v.value
}

func (v *NullableIntegrationProductImage) Set(val *IntegrationProductImage) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationProductImage) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationProductImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationProductImage(val *IntegrationProductImage) *NullableIntegrationProductImage {
	return &NullableIntegrationProductImage{value: val, isSet: true}
}

func (v NullableIntegrationProductImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationProductImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


